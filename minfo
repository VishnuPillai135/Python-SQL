#!/usr/bin/python3

#print info about cast and crew for Movie

import sys
import psycopg2

# set up some globals

usage = "Usage: minfo 'MovieTitlePattern' [Year]"
db = None

# process command-line args
argc = len(sys.argv)
#if no command line arguments
if argc == 1:
	print(usage)
	exit(1)

#if second argument is not a year
if argc == 3:
	if sys.argv[2].isdecimal() == False:
		print(usage)
		exit(1)
#if more than 2 arguments
if argc != 3 and argc != 2:
	print(usage)
	exit(1)


#Queries:
#if year not given
queryMultipleMovies1 = """
select Movies.title, Movies.start_year
from Movies 
where Movies.title ~* %s
order by start_year asc, title asc
"""

#if year given
queryMultipleMovies2 = """
select Movies.title, Movies.start_year
from Movies 
where Movies.title ~* %s and Movies.start_year = %s
order by start_year asc, title asc
"""

#if year not given for actors
queryActors1 = """
select Names.name, Acting_roles.played
from Movies, Principals, Names, Acting_roles
where Movies.id = Principals.movie_id
and Acting_roles.name_id = Principals.name_id
and Names.id = Principals.name_id
and Acting_roles.movie_id = Principals.movie_id
and Movies.title ~* %s
order by Principals.ordering, Acting_roles.played
"""

#if year given for actors
queryActors2 = """
select Names.name, Acting_roles.played
from Movies, Principals, Names, Acting_roles
where Movies.id = Principals.movie_id
and Acting_roles.name_id = Principals.name_id
and Names.id = Principals.name_id
and Acting_roles.movie_id = Principals.movie_id
and Movies.title ~* %s
and Movies.start_year = %s
order by Principals.ordering, Acting_roles.played
"""

#if year not given for cast
queryCrew1 = """
select Names.name, Crew_roles.role
from Movies, Principals, Names, Crew_roles
where Principals.movie_id = Movies.id
and Crew_roles.movie_id = Principals.movie_id
and Crew_roles.name_id = Principals.name_id
and Principals.name_id = Names.id
and Movies.title ~* %s
order by Principals.ordering, Crew_roles.role
"""

#if year given for cast
queryCrew2 = """
select Names.name, Crew_roles.role
from Movies, Principals, Names, Crew_roles
where Principals.name_id = Names.id
and Crew_roles.movie_id = Principals.movie_id
and Crew_roles.name_id = Principals.name_id
and Principals.movie_id = Movies.id
and Movies.title ~* %s and movies.start_year = %s
order by Principals.ordering, Crew_roles.role
"""

#if given
# manipulate database

try:
	db = psycopg2.connect("dbname=imdb")
	cursor = db.cursor()
	#count number of tuples
	if (argc == 2):
		cursor.execute(queryMultipleMovies1, [sys.argv[1]])
	elif (argc == 3):
		cursor.execute(queryMultipleMovies2, [sys.argv[1], sys.argv[2]])
	count = 0
	#count number of tuples
	for tuple in cursor.fetchall():
		count += 1
	#if no mathces
	if count == 0:
		if argc == 2:
			print("No movie matching '%s'" % (sys.argv[1]))
		if argc == 3:
			print("No movie matching '%s' %s" % (sys.argv[1], sys.argv[2]))
  #only 1 movie found
	elif count == 1:
		print("%s (%s)" % (tuple[0], tuple[1]))
		#year not given for actors
		if (argc == 2):
			cursor.execute(queryActors1, [sys.argv[1]])
		#year given for actors
		elif (argc == 3):
			cursor.execute(queryActors2, [sys.argv[1], sys.argv[2]])
		print("===============")
		print("Starring")
		for tuple in cursor.fetchall():
			print(" %s as %s" % (tuple[0], tuple[1]))
		#year not given for crew
		if (argc == 2):
			cursor.execute(queryCrew1, [sys.argv[1]])
		#year given for crew
		elif (argc == 3):
			cursor.execute(queryCrew2, [sys.argv[1], sys.argv[2]])
		print("and with")
		for tuple in cursor.fetchall():
			upperCase = tuple[1]
			upperCase = upperCase.capitalize()
			print(" %s: %s" % (tuple[0], upperCase))

  #multiple movies found
	else:
		if argc == 2:
			print("Movies matching '%s'" % (sys.argv[1]))
		if argc == 3:
			print("Movies matching '%s' %s" % (sys.argv[1], sys.argv[2]))
		print("===============")
    	#year not given
		if (argc == 2):
			cursor.execute(queryMultipleMovies1, [sys.argv[1]])
		#year given
		if (argc == 3):
			cursor.execute(queryMultipleMovies2, [sys.argv[1], sys.argv[2]])
		#print tuples
		for tuple in cursor.fetchall():
			print("%s (%s)" % (tuple[0], tuple[1])) 

except psycopg2.Error as err:
	print("DB error: ", err)
finally:
	if db:
		db.close()

