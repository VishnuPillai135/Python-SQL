#!/usr/bin/python3

#print info about different releases for Movie

import sys
import psycopg2

usage = "Usage: rels 'PartialMovieTitle'"
db = None

# process command-line args

argc = len(sys.argv)
#return error if arg more than 1?
if argc != 2:
	print("Usage: rels 'PartialMovieTitle'")
	exit(1)

#first query
query = """
select Movies.title, Movies.start_year
from Movies 
where title ~* %s
order by start_year asc, title asc
"""

#second query
oneTupleQuery = """
select Aliases.local_title,
Aliases.region, Aliases.language
from Movies, Aliases
where Movies.title ~* %s AND Aliases.movie_id = Movies.id
order by Aliases.ordering asc
"""
# manipulate database

try:
	db = psycopg2.connect("dbname=imdb")
	cursor = db.cursor()
	cursor.execute(query, [sys.argv[1]])
	count = 0
	#count number of tuples
	for tuple in cursor.fetchall():
		count += 1

	#if no mathces
	if count == 0:
		print("No movie matching '%s'" % sys.argv[1])
	#if 1 match
	elif count == 1:
		#cursor.execute(query, [sys.argv[1]])
		print("%s (%s) was also released as" % (tuple[0], tuple[1]))
		title = tuple[0]
		year = tuple[0]
		cursor.execute(oneTupleQuery, [sys.argv[1]])
		for tuple in cursor.fetchall():
			#if no alternate releases TEST THIS MAKKE SURE TO TEST THIS, COULD BE if tuple == []
			if tuple == None:
				print("%s (%s) has no alternative releases" % (title, year))
				break
			#else if alternate releases exist
			#if no language
			elif tuple[2] == None:
				random = tuple[1]
				random = random.strip()
				print("'%s' (region: %s)" % (tuple[0], random))
			#if no region
			elif tuple[1] == None:
				print("'%s'" % (tuple[0]))
			#if region and language available
			else:
				random1 = tuple[1]
				random1 = random1.strip()
				random2 = tuple[2]
				random2 = random2.strip()
				print("'%s' (region: %s, language: %s)" % (tuple[0], random1, random2))
	else: 
		cursor.execute(query, [sys.argv[1]])
		print("Movies matching '%s'" % (sys.argv[1]))
		print("===============")
		for tuple in cursor.fetchall():
			print("%s (%s)" % (tuple[0], tuple[1]))

except psycopg2.Error as err:
	print("DB error: ", err)
finally:
	if db:
		db.close()

