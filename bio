#!/usr/bin/python3

import sys
import psycopg2

#base query: match people
#year not known
queriesPeople1 = """
select Names.name, Names.birth_year, Names.death_year, Names.id
from Names
where Names.name ~* %s
order by Names.name, Names.id
"""

#year known
queriesPeople2 = """
select Names.name, Names.birth_year, Names.death_year, Names.id
from Names
where Names.name ~* %s 
and Names.birth_year = %s
order by Names.name, Names.id
"""

#query for movie where year isn't given
queriesMovies = """
select Movies.title, Movies.start_year, Names.name, Names.id
from Movies, Names, Principals
where Principals.name_id = Names.id
and Principals.movie_id = Movies.id
and Names.name ~* %s
and Names.id = %s
order by Movies.start_year, Movies.title
"""

#shows acting credits
queriesActing = """
select Acting_roles.played
from Movies, Acting_roles, Names
where Movies.id = Acting_roles.movie_id
and Names.id = Acting_roles.name_id
and Movies.title ~* %s
and Movies.start_year = %s
and Names.name ~* %s
and Names.id = %s
order by Acting_roles.played
"""

#shows crew credits
queriesCrew = """
select Crew_roles.role
from Movies, Crew_roles, Names
where Movies.id = Crew_roles.movie_id
and Names.id = Crew_roles.name_id
and Movies.title ~* %s
and Movies.start_year = %s
and Names.name ~* %s
and Names.id = %s
order by Crew_roles.role
"""




usage = "Usage: bio 'NamePattern' [Year]"
db = None

# process command-line args

argc = len(sys.argv)
#error checking for command-line args
if argc != 2 and argc != 3:
	print(usage)
	exit(1)
if argc == 3:
	if sys.argv[2].isdecimal() == False:
		print(usage)
		exit(1)
# manipulate database

try:
	db = psycopg2.connect("dbname=imdb")
	cursor = db.cursor()
	if argc == 2:
		cursor.execute(queriesPeople1, [sys.argv[1]])
	elif argc == 3:
		cursor.execute(queriesPeople2, [sys.argv[1], sys.argv[2]])
	count = 0
	#count number of tuples
	for tuple in cursor.fetchall():
		count += 1
	#if no results, return error message
	if count == 0:
		print("No name matching '%s'" % (sys.argv[1]))
		exit(0)
	#if 1 result
	if count == 1:
		#if dob unknown
		if tuple[1] == None:
			print("Filmography for %s (???)" % tuple[0])
		#if still alive
		elif tuple[2] == None:
			print("Filmography for %s (%s-)" % (tuple[0], tuple[1]))
		#if dead
		else:
			print("Filmography for %s (%s-%s)" % (tuple[0], tuple[1], tuple[2]))
		print("===============")
		cursor.execute(queriesMovies, [sys.argv[1], tuple[3]])
		#print name of movies and date
		for tuple in cursor.fetchall():
			print("%s (%s)" % (tuple[0], tuple[1]))
			cursor.execute(queriesActing, [tuple[0], tuple[1], tuple[2], tuple[3]])
			#print acting role
			for tuple2 in cursor.fetchall():
				print(" playing %s" % (tuple2[0]))
			cursor.execute(queriesCrew, [tuple[0], tuple[1], tuple[2], tuple[3]])
			#print crew role
			for tuple3 in cursor.fetchall():
				upperCase = tuple3[0]
				upperCase = upperCase.capitalize()
				if upperCase == "Archive_footage":
					upperCase = "Archive footage"
				print(" as %s" % (upperCase))
	#if multiple people are found
	else:
		print("Names matching '%s'" % (sys.argv[1]))
		print("===============")
		if argc == 2:
			cursor.execute(queriesPeople1, [sys.argv[1]])
		elif argc == 3:
			cursor.execute(queriesPeople2, [sys.argv[1], sys.argv[2]])
		for tuple in cursor.fetchall():
			if tuple[1] == None:
				print("%s (???)" % (tuple[0]))
			elif tuple[2] == None:
				print("%s (%s-)" % (tuple[0], tuple[1]))
			else: 
				print("%s (%s-%s)" % (tuple[0], tuple[1], tuple[2]))



except psycopg2.Error as err:
	print("DB error: ", err)
finally:
	if db:
		db.close()

